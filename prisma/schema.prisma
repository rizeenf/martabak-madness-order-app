// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  title     String
  desc      String
  img       String
  slug      String    @unique
  products  Product[]
}

model Product {
  id           String           @id @default(cuid())
  createdAt    DateTime         @default(now())
  title        String
  desc         String
  img          String
  price        Decimal
  isFeatured   Boolean          @default(false)
  options      ProductOptions[]
  category     Category         @relation(fields: [categorySlug], references: [slug])
  categorySlug String
}

model ProductOptions {
  type            String   @unique
  additionalPrice Decimal
  Product         Product? @relation(fields: [productId], references: [id])
  productId       String?
}

model Order {
  id        String         @id @default(cuid())
  createdAt DateTime       @default(now())
  price     Decimal
  products  ProductOrder[]
  status    String
  intent_id String?        @unique
  user      User           @relation(fields: [userEmail], references: [email])
  userEmail String
}

model ProductOrder {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  price     Decimal
  title     String
  img       String
  quantity  Int
  Order     Order?   @relation(fields: [orderId], references: [id])
  orderId   String?
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  isAdmin       Boolean   @default(false)
  accounts      Account[]
  sessions      Session[]
  Order         Order[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
